name: Python test and build

on: [push]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          architecture: 'x64'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Test with pytest
        run: |
          pip install pytest pytest-cov
          pytest api_tests.py --doctest-modules --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html

      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: junit/test-results.xml

  build:
    needs: test
    permissions:
      id-token: write    
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:     
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/devops-labs:latest

  submit_results:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Generate Azure Access Token
        id: token-gen
        run: |
          ACCESS_TOKEN=$(az account get-access-token --query accessToken -o tsv)
          echo "azureAccessToken=$ACCESS_TOKEN" >> "$GITHUB_ENV"

      - name: Upload reports
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          AZURE_ACCESS_TOKEN: ${{ env.azureAccessToken }}
        run: |
          RESPONSE=$(curl -X POST -H "Authorization: Bearer $AZURE_ACCESS_TOKEN" -d "$DOCKERHUB_USERNAME/devops-labs" https://devsecops-ver.azurewebsites.net/api/week1-container)
          echo "Week1 container upload response: $RESPONSE"
  sonarqube:
    needs: test
    if: true
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        # Disabling shallow clones is recommended for improving the relevancy of reporting
        fetch-depth: 0
    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_URL }}
        
    dast:
    needs: [test, sonarqube]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/devops-labs:dast-test
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy DAST Container App
      uses: azure/container-apps-deploy-action@v1
      with:
        imageToDeploy: ${{ secrets.DOCKERHUB_USERNAME }}/devops-labs:dast-test
        containerAppName: devops-test-app
        containerAppEnvironment: devops-app-env
        resourceGroup: devsecops-lab
        location: australiaeast
        targetPort: 5000

- name: Get deployed DAST app url
  run: |
    export FQDN=$(az containerapp show -n devops-test-app -g devsecops-lab --query properties.configuration.ingress.fqdn -o tsv)
    echo "TEST_APP_URL=https://$FQDN" >> $GITHUB_ENV
    echo "TEST_APP_URL=https://$FQDN" 
    curl https://$FQDN/ui
    sed -i "s,http://localhost:5000,https://$FQDN,g" $GITHUB_WORKSPACE/openapi_specs/openapi3.yml
